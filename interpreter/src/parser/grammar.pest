WHITESPACE = _{ " " | "\t" }
//COMMENT = _{ ("'" | "REM") ~ metacommand? ~ (!"\n" ~ ANY)* ~ ("\n" | EOI) }
comment = { remark_leader ~ metacommand? ~ (!"\n" ~ ANY)* }

program = { SOI ~ ((numbered_statement | plain_statement | label_definition | comment) ~ comment? ~ statement_separator | "\n")* ~ EOI }

numbered_statement = { number ~ plain_statement }
label_definition = { identifier ~ ":" }

plain_statement = {
    for_statement |
    if_statement |
    select_case_statement |
    do_statement |
    while_statement |
    exit_statement |
    goto_statement |
    assignment_statement |
    print_statement |
    input_statement |
    dim_statement |
    comment
}
statement_separator = _{ "\n" | ":" | EOI }

assignment_statement = { (array_access | variable) ~ assignment_operator ~ logical_expression }
print_statement = { "PRINT" ~ logical_expression }
input_statement = { "INPUT" ~ (string ~ (";" | ","))? ~ variable ~ ("," ~ variable)* }
dim_statement = { "DIM" ~ shared_keyword? ~ variable_without_type ~ ("(" ~ array_subscripts ~ ")")? ~ ("AS" ~ type_specifier)? }
for_statement = { 
    "FOR" ~ variable ~ "=" ~ expression ~ "TO" ~ expression ~ ("STEP" ~ expression)? ~ statement_separator ~ statement_list ~ "NEXT" ~ variable?
}
if_statement = { 
    "IF" ~ logical_expression ~ "THEN" ~ statement_separator ~ statement_list ~
    ("ELSEIF" ~ logical_expression ~ "THEN" ~ statement_separator ~ statement_list)* ~
    ("ELSE" ~ statement_separator ~ statement_list)? ~
    "ENDIF"
}

do_statement = {
    do_while_statement |
    do_until_statement |
    do_loop_while_statement |
    do_loop_until_statement |
    do_infinite_statement
}

do_while_statement = { "DO" ~ "WHILE" ~ logical_expression ~ statement_separator ~ statement_list ~ "LOOP" }
do_until_statement = { "DO" ~ "UNTIL" ~ logical_expression ~ statement_separator ~ statement_list ~ "LOOP" }
do_loop_while_statement = { "DO" ~ statement_separator ~ statement_list ~ "LOOP" ~ "WHILE" ~ logical_expression }
do_loop_until_statement = { "DO" ~ statement_separator ~ statement_list ~ "LOOP" ~ "UNTIL" ~ logical_expression }
do_infinite_statement = { "DO" ~ statement_separator ~ statement_list ~ "LOOP" }

while_statement = { "WHILE" ~ logical_expression ~ statement_separator ~ statement_list ~ "WEND" }

exit_statement = { "EXIT" ~ ("DO" | "FOR") }
goto_statement = { "GOTO" ~ (number | identifier) }

statement_list = { (plain_statement ~ statement_separator)* }

logical_expression = { logical_term ~ (or_operator ~ logical_term)* }
logical_term = { logical_factor ~ (and_operator ~ logical_factor)* }
logical_factor = { not_operator? ~ relational_expression | ("(" ~ logical_expression ~ ")") }
relational_expression = { expression ~ relational_operator ~ expression | expression }
expression = { term ~ ((addition_operator|subtraction_operator) ~ term)* }
term = { factor ~ ((multiplication_operator|division_operator) ~ factor)* }
factor = { unary_operator? ~ primary }
primary = { number | string | array_access | variable | ("(" ~ logical_expression ~ ")") }

metacommand = { "$STATIC" | "$DYNAMIC" }

number = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? | "." ~ ASCII_DIGIT+ }
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
variable = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* ~ (single_precision_suffix | double_precision_suffix | string_suffix | integer_suffix | long_integer_suffix)? }
variable_without_type = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* }
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
array_access = { ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* ~ "(" ~ logical_expression ~ ("," ~ logical_expression)* ~ ")" }


// Date type suffixes
single_precision_suffix = { "!" }
double_precision_suffix = { "#" }
string_suffix = { "$" }
integer_suffix = { "%" }
long_integer_suffix = { "&" }

// Mathemtical operators
multiplication_operator = { "*" }
subtraction_operator = { "-" }
division_operator = { "/" }
addition_operator = { "+" }
exponentiation_operator = { "^" }

// Assignment operator
assignment_operator = { "=" }

// Unary operators
unary_operator = { "-" | "+" }

// Logical operators
and_operator = { "AND" }
or_operator = { "OR" }
not_operator = { "NOT" }

// Relational operators (order matters for longest match first)
relational_operator = { "<=" | ">=" | "<>" | "=" | "<" | ">" }

remark_leader = { "'" | "REM" }
shared_keyword = { "SHARED" }
type_specifier = { "INTEGER" | "LONG" | "SINGLE" | "DOUBLE" | "STRING" | user_defined_type }
user_defined_type = { ASCII_ALPHA ~ ("." | ASCII_ALPHANUMERIC)* }

array_subscripts = { array_subscript ~ ("," ~ array_subscript)* }
array_subscript = { (logical_expression ~ "TO")? ~ logical_expression }

select_case_statement = { 
    "SELECT" ~ "CASE" ~ logical_expression ~ statement_separator ~ 
    case_branch* ~ 
    case_else_branch? ~ 
    "END" ~ "SELECT" 
}

case_branch = { 
    "CASE" ~ case_expression_list ~ statement_separator ~ statement_list 
}

case_else_branch = { 
    "CASE" ~ "ELSE" ~ statement_separator ~ statement_list 
}

case_expression_list = { case_expression ~ ("," ~ case_expression)* }

case_expression = {
    case_range_expression |
    case_relational_expression |
    case_exact_expression
}

case_range_expression = { case_constant ~ "TO" ~ case_constant }
case_relational_expression = { "IS" ~ relational_operator ~ case_constant }
case_exact_expression = { case_constant }

case_constant = { number | string }
