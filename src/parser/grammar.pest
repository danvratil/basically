WHITESPACE = _{ " " | "\t" }
//COMMENT = _{ ("'" | "REM") ~ metacommand? ~ (!"\n" ~ ANY)* ~ ("\n" | EOI) }
comment = { remark_leader ~ metacommand? ~ (!"\n" ~ ANY)* }

program = { SOI ~ ((statement ~ comment? ~ statement_separator) | "\n")* ~ EOI }

statement = {
    assignment_statement |
    print_statement |
    input_statement |
    dim_statement |
    comment
}
statement_separator = _{ "\n" | ":" | EOI }

assignment_statement = { (array_access | variable) ~ assignment_operator ~ expression }
print_statement = { "PRINT" ~ expression }
input_statement = { "INPUT" ~ (string ~ (";" | ","))? ~ variable ~ ("," ~ variable)* }
dim_statement = { "DIM" ~ shared_keyword? ~ variable_without_type ~ ("(" ~ array_subscripts ~ ")")? ~ ("AS" ~ type_specifier)? }

expression = { term ~ ((addition_operator|subtraction_operator) ~ term)* }
term = { factor ~ ((multiplication_operator|division_operator) ~ factor)* }
factor = { number | string | array_access | variable | ("(" ~ expression ~ ")") }

metacommand = { "$STATIC" | "$DYNAMIC" }

number = @{ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? | "." ~ ASCII_DIGIT+ }
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
variable = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* ~ (single_precision_suffix | double_precision_suffix | string_suffix | integer_suffix | long_integer_suffix)? }
variable_without_type = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* }
array_access = { ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* ~ "(" ~ expression ~ ("," ~ expression)* ~ ")" }


// Date type suffixes
single_precision_suffix = { "!" }
double_precision_suffix = { "#" }
string_suffix = { "$" }
integer_suffix = { "%" }
long_integer_suffix = { "&" }

// Mathemtical operators
multiplication_operator = { "*" }
subtraction_operator = { "-" }
division_operator = { "/" }
addition_operator = { "+" }
exponentiation_operator = { "^" }

// Logic operators
assignment_operator = { "=" }
relational_operators = { "<" | "=" | ">" }

remark_leader = { "'" | "REM" }
shared_keyword = { "SHARED" }
type_specifier = { "INTEGER" | "LONG" | "SINGLE" | "DOUBLE" | "STRING" | user_defined_type }
user_defined_type = { ASCII_ALPHA ~ ("." | ASCII_ALPHANUMERIC)* }

array_subscripts = { array_subscript ~ ("," ~ array_subscript)* }
array_subscript = { (expression ~ "TO")? ~ expression }
